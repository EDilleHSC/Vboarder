#!/bin/bash
# VBoarder Pre-Commit Hook
# Ensures code quality before allowing commits
# Install: cp .githooks/pre-commit .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit

set -e

echo "🔍 Running VBoarder pre-commit checks..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in the right directory
if [ ! -f "pyproject.toml" ]; then
    echo "${RED}❌ Error: Not in VBoarder root directory${NC}"
    exit 1
fi

# Check if ruff is installed
if ! command -v ruff &> /dev/null; then
    echo "${RED}❌ Error: Ruff not installed${NC}"
    echo "Install with: pip install ruff"
    exit 1
fi

echo ""
echo "1️⃣  Checking Python code formatting..."

# Get list of staged Python files
STAGED_PY_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$STAGED_PY_FILES" ]; then
    echo "${GREEN}✅ No Python files staged${NC}"
else
    echo "   Checking ${YELLOW}$(echo "$STAGED_PY_FILES" | wc -l)${NC} Python files..."

    # Run ruff check
    if ! ruff check $STAGED_PY_FILES; then
        echo ""
        echo "${RED}❌ Ruff found issues${NC}"
        echo ""
        echo "Options:"
        echo "  1. Auto-fix: ${YELLOW}ruff check --fix $STAGED_PY_FILES${NC}"
        echo "  2. Skip check: ${YELLOW}git commit --no-verify${NC}"
        exit 1
    fi

    # Run ruff format check
    if ! ruff format --check $STAGED_PY_FILES; then
        echo ""
        echo "${RED}❌ Code not formatted${NC}"
        echo ""
        echo "Auto-fix with: ${YELLOW}ruff format $STAGED_PY_FILES${NC}"
        echo "Then: ${YELLOW}git add $STAGED_PY_FILES${NC}"
        exit 1
    fi

    echo "${GREEN}✅ All Python files pass linting${NC}"
fi

echo ""
echo "2️⃣  Checking for debug code..."

# Check for common debug patterns
DEBUG_PATTERNS=(
    "import pdb"
    "pdb.set_trace"
    "breakpoint()"
    "print("
    "console.log"
)

FOUND_DEBUG=false

for pattern in "${DEBUG_PATTERNS[@]}"; do
    if echo "$STAGED_PY_FILES" | xargs grep -n "$pattern" 2>/dev/null; then
        echo "${YELLOW}⚠️  Found debug code: $pattern${NC}"
        FOUND_DEBUG=true
    fi
done

if [ "$FOUND_DEBUG" = true ]; then
    echo ""
    echo "${YELLOW}⚠️  Warning: Debug code detected${NC}"
    echo "Review your changes and remove debug statements, or use:"
    echo "${YELLOW}git commit --no-verify${NC} to bypass this check"
    echo ""
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo "${GREEN}✅ No debug code found${NC}"
fi

echo ""
echo "3️⃣  Checking for secrets/credentials..."

# Check for potential secrets
SECRET_PATTERNS=(
    "api_key.*=.*['\"]"
    "password.*=.*['\"]"
    "secret.*=.*['\"]"
    "token.*=.*['\"]"
    "bearer.*['\"]"
)

FOUND_SECRETS=false

for pattern in "${SECRET_PATTERNS[@]}"; do
    if echo "$STAGED_PY_FILES" | xargs grep -iE "$pattern" 2>/dev/null | grep -v "# noqa" | grep -v "os.getenv" | grep -v "environ.get"; then
        echo "${RED}❌ Potential secret found: $pattern${NC}"
        FOUND_SECRETS=true
    fi
done

if [ "$FOUND_SECRETS" = true ]; then
    echo ""
    echo "${RED}❌ ERROR: Potential secrets detected${NC}"
    echo "Remove hardcoded credentials or use environment variables"
    exit 1
else
    echo "${GREEN}✅ No hardcoded secrets found${NC}"
fi

echo ""
echo "4️⃣  Checking for large files..."

# Check for files larger than 1MB
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | while read file; do
    if [ -f "$file" ]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [ "$size" -gt 1048576 ]; then
            echo "$file ($(($size / 1048576))MB)"
        fi
    fi
done)

if [ -n "$LARGE_FILES" ]; then
    echo "${YELLOW}⚠️  Large files detected:${NC}"
    echo "$LARGE_FILES"
    echo ""
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo "${GREEN}✅ No large files${NC}"
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "${GREEN}✅ All pre-commit checks passed!${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

exit 0
