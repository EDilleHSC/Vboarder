import os
import json
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from agents.agent_runtime.ask import main as ask_main
from agents.agent_runtime.utils import load_agent, load_memory, print_verbose_block
from agents.agent_runtime.model_router import smart_hybrid_inference

app = FastAPI(title="VBoarder Agent API", version="1.0")

# === Request schema ===
class QueryRequest(BaseModel):
    agent: str
    query: str
    max_memory: int = 5
    model: str | None = None
    verbose: bool = False

@app.post("/ask")
def ask_agent(req: QueryRequest):
    """Run a local agent query and return the model response."""
    try:
        # === Load agent data ===
    agent_path = os.path.join("agents", req.agent)
        agent_data = load_agent(agent_path)

        # === Load memory ===
        memory_entries = load_memory(agent_path)

        # === Build structured messages ===
        messages = []
        system_prompt = agent_data.get("system_prompt", "You are a helpful assistant.")
        messages.append({"role": "system", "content": system_prompt})

        for entry in memory_entries:
            messages.append({"role": "user", "content": entry["q"]})
            messages.append({"role": "assistant", "content": entry["a"]})

        messages.append({"role": "user", "content": req.query})

        # === Call local inference ===
        response = smart_hybrid_inference(
            prompt=req.query,
            model_override=req.model,
            context=messages
        )

        # === Return clean JSON ===
        return {"agent": req.agent, "query": req.query, "response": response}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
